pipeline {
    agent any

    // DB, Redis 연결 정보를 환경변수에 추가
    environment {
        DB_USERNAME = 'eyak'
        DB_PASSWORD = 'yakmukjja103'
        REDIS_PASSWORD = 'yakmukjja103'
    }

    stages {
       
        stage('Prepare') {
            steps {
                // Get some code from a Gitlab repository
                git branch: 'develop/backend',
                    credentialsId: 'eyak_token_for_jenkins',
                    url: 'https://lab.ssafy.com/s09-webmobile3-sub2/S09P12A103.git'
            }
        }
        

        stage('Gradle-Build') {
            steps {
                sh 'ls'
                sh 'pwd'
                sh 'chmod +x backend/e-yak/gradlew'
                sh 'cd backend/e-yak && ./gradlew clean build'
            }
        }
        
        stage('Old Image Remove') {
            steps {
                script {
                    def containerName = 'springboot'  // 컨테이너 이름
                    def imageName = 'docker-springboot'  // 이미지 이름
                    def imageTag = 'latest' // 이미지 태그 이름
                    // def existingImage = sh(returnStdout: true, script: "docker images -q ${imageName}:${imageTag}").trim()
                    
                    sh "docker stop ${containerName}"  // 컨테이너 stop
                    sh "docker rm ${containerName}"  // 컨테이너 삭제
                    sh "docker rmi ${imageName}:${imageTag}"  // image 삭제

                    // if (existingImage) {
                    //     sh "docker stop ${existingContainer}"  // 컨테이너 stop
                    //     sh "docker rmi ${imageName}:${imageTag}"  // image 삭제
                    // } else {
                    //     echo "No existing image found with tag: ${imageName}:${imageTag}"
                    // }
                }
            }
        }


        stage('docker-springboot'){
            steps{
                script{

                    docker.build('docker-springboot', './backend/e-yak')
                }
                
                // sh 'docker build -t docker-springboot .'
                echo 'spring 빌드'
                
                // Docker Compose 실행
                sh 'ls'
                sh 'pwd'
                sh 'cd backend/e-yak && docker-compose up -d'
                echo 'compose 실행'
            }
        }

    }
}

